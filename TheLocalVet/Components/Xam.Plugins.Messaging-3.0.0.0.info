{"Name":"Messaging Plugin","Id":2359,"Alias":"Xam.Plugins.Messaging","Description":"\r\nThe Messaging plugin makes it possible to make a phone call, send a sms or send an e-mail using the default messaging applications on the different mobile platforms.\r\n\r\n### API Design\r\n\r\nThe Messaging Pluging makes use of `IEmailTask`, `ISmsTask` and `IPhoneCallTask` abstractions to send an e-mail, send a sms or make a phone call respectively.  These abstractions are defined within the `Lotz.Xam.Messaging.Abstractions` PCL library.  Platform specific implementations for these different abstractions are provided within a `Lotz.Xam.Messaging` library for the different platforms.\r\n\r\n```csharp\r\npublic interface IEmailTask\r\n{\r\n    bool CanSendEmail { get; }\r\n    void SendEmail(IEmailMessage email);\r\n    void SendEmail(string to, string subject, string message);\r\n}\r\n```\r\n\r\n```csharp\r\npublic interface ISmsTask\r\n{\r\n    bool CanSendSms { get; }\r\n    void SendSms(string recipient, string message);\r\n}\r\n```\r\n\r\n```csharp\r\npublic interface IPhoneCallTask\r\n{\r\n\tbool CanMakePhoneCall { get; }\r\n    void MakePhoneCall(string number, string name = null);\r\n}\r\n```\r\n\r\n### Using the API \r\nThe messaging API\u0027s can be accessed on the different mobile platforms using the `MessagingPlugin` container class.  Here are some snippets to illustrate how to access the API from within an `Activity`, `UIViewController` or Windows `Page`.  \r\n\r\n```csharp\r\n// Make Phone Call\r\nvar phoneCallTask = MessagingPlugin.PhoneDialer;\r\nif (phoneCallTask.CanMakePhoneCall) \r\n\tphoneCallTask.MakePhoneCall(\"+272193343499\");\r\n\r\n// Send Sms\r\nvar smsTask = MessagingPlugin.SmsMessenger;\r\nif (smsTask.CanSendSms)\r\n   smsTask.SendSms(\"+27213894839493\", \"Well hello there from Xam.Messaging.Plugin\");\r\n\r\nvar emailTask = MessagingPlugin.EmailMessenger;\r\nif (emailTask.CanSendEmail)\r\n{\r\n\t// Send simple e-mail to single receiver without attachments, bcc, cc etc.\r\n\temailTask.SendEmail(\"to.plugins@xamarin.com\", \"Xamarin Messaging Plugin\", \"Well hello there from Xam.Messaging.Plugin\");\r\n\r\n\t// Alternatively use EmailBuilder fluent interface to construct more complex e-mail with multiple recipients, bcc, attachments etc. \r\n    var email = new EmailMessageBuilder()\r\n      .To(\"to.plugins@xamarin.com\")\r\n      .Cc(\"cc.plugins@xamarin.com\")\r\n      .Bcc(new[] { \"bcc1.plugins@xamarin.com\", \"bcc2.plugins@xamarin.com\" })\r\n      .Subject(\"Xamarin Messaging Plugin\")\r\n      .Body(\"Well hello there from Xam.Messaging.Plugin\")\r\n      .Build();\r\n\r\n    emailTask.SendEmail(email);\r\n}           \r\n```\r\n\r\n### Platform API Extensions\r\n\r\nSending HTML e-mail and adding e-mail attachments are only supported on some platforms.  These features are provided as platform specific extensions on the ```EmailMessageBuilder``` class.  To add HTML body content use the ```EmailMessageBuilder.BodyAsHtml``` extension (**iOS, Android**).  To add attachments, use the ```EmailMessageBuilder.WithAttachment``` platform specific overloads (**iOS, Android, WinPhone RT**).  Platforms that do not support these features won\u0027t have these extensions available to use.  \r\n\r\n```csharp\r\n// Construct HTML email (iOS and Android only)\r\nvar email = new EmailMessageBuilder()\r\n  .To(\"to.plugins@xamarin.com\")\r\n  .Subject(\"Xamarin Messaging Plugin\")\r\n  .BodyAsHtml(\"Well hello there from \u003ca\u003eXam.Messaging.Plugin\u003c/a\u003e\")\r\n  .Build();\r\n\r\n// Construct email with attachment on Android (single file only)\r\nvar email = new EmailMessageBuilder()\r\n  .To(\"to.plugins@xamarin.com\")\r\n  .Subject(\"Xamarin Messaging Plugin\")\r\n  .Body(\"Well hello there from Xam.Messaging.Plugin\")\r\n  .WithAttachment(\"/storage/emulated/0/Android/data/MyApp/files/Pictures/temp/IMG_20141224_114954.jpg\");\r\n  .Build();\r\n```\r\n","Version":"3.0.0.0","Summary":"Xamarin and Windows plugin to make a phone call, send a sms or send an e-mail using the default messaging applications on the different mobile platforms.","QuickStart":"\r\nThe Messaging plugin makes it possible to make a phone call, send a sms or send an e-mail using the default messaging applications on the different mobile platforms.\r\n\r\n### API Design\r\n\r\nThe Messaging Pluging makes use of `IEmailTask`, `ISmsTask` and `IPhoneCallTask` abstractions to send an e-mail, send a sms or make a phone call respectively.  These abstractions are defined within the `Lotz.Xam.Messaging.Abstractions` PCL library.  Platform specific implementations for these different abstractions are provided within a `Lotz.Xam.Messaging` library for the different platforms.\r\n\r\n```csharp\r\npublic interface IEmailTask\r\n{\r\n    bool CanSendEmail { get; }\r\n    void SendEmail(IEmailMessage email);\r\n    void SendEmail(string to, string subject, string message);\r\n}\r\n```\r\n\r\n```csharp\r\npublic interface ISmsTask\r\n{\r\n    bool CanSendSms { get; }\r\n    void SendSms(string recipient, string message);\r\n}\r\n```\r\n\r\n```csharp\r\npublic interface IPhoneCallTask\r\n{\r\n\tbool CanMakePhoneCall { get; }\r\n    void MakePhoneCall(string number, string name = null);\r\n}\r\n```\r\n\r\n### Using the API \r\nThe messaging API\u0027s can be accessed on the different mobile platforms using the `MessagingPlugin` container class.  Here are some snippets to illustrate how to access the API from within an `Activity`, `UIViewController` or Windows `Page`.  \r\n\r\n```csharp\r\n// Make Phone Call\r\nvar phoneCallTask = MessagingPlugin.PhoneDialer;\r\nif (phoneCallTask.CanMakePhoneCall) \r\n\tphoneCallTask.MakePhoneCall(\"+272193343499\");\r\n\r\n// Send Sms\r\nvar smsTask = MessagingPlugin.SmsMessenger;\r\nif (smsTask.CanSendSms)\r\n   smsTask.SendSms(\"+27213894839493\", \"Well hello there from Xam.Messaging.Plugin\");\r\n\r\nvar emailTask = MessagingPlugin.EmailMessenger;\r\nif (emailTask.CanSendEmail)\r\n{\r\n\t// Send simple e-mail to single receiver without attachments, bcc, cc etc.\r\n\temailTask.SendEmail(\"to.plugins@xamarin.com\", \"Xamarin Messaging Plugin\", \"Well hello there from Xam.Messaging.Plugin\");\r\n\r\n\t// Alternatively use EmailBuilder fluent interface to construct more complex e-mail with multiple recipients, bcc, attachments etc. \r\n    var email = new EmailMessageBuilder()\r\n      .To(\"to.plugins@xamarin.com\")\r\n      .Cc(\"cc.plugins@xamarin.com\")\r\n      .Bcc(new[] { \"bcc1.plugins@xamarin.com\", \"bcc2.plugins@xamarin.com\" })\r\n      .Subject(\"Xamarin Messaging Plugin\")\r\n      .Body(\"Well hello there from Xam.Messaging.Plugin\")\r\n      .Build();\r\n\r\n    emailTask.SendEmail(email);\r\n}           \r\n```\r\n\r\n### Platform API Extensions\r\n\r\nSending HTML e-mail and adding e-mail attachments are only supported on some platforms.  These features are provided as platform specific extensions on the ```EmailMessageBuilder``` class.  To add HTML body content use the ```EmailMessageBuilder.BodyAsHtml``` extension (**iOS, Android**).  To add attachments, use the ```EmailMessageBuilder.WithAttachment``` platform specific overloads (**iOS, Android, WinPhone RT**).  Platforms that do not support these features won\u0027t have these extensions available to use.  \r\n\r\n```csharp\r\n// Construct HTML email (iOS and Android only)\r\nvar email = new EmailMessageBuilder()\r\n  .To(\"to.plugins@xamarin.com\")\r\n  .Subject(\"Xamarin Messaging Plugin\")\r\n  .BodyAsHtml(\"Well hello there from \u003ca\u003eXam.Messaging.Plugin\u003c/a\u003e\")\r\n  .Build();\r\n\r\n// Construct email with attachment on Android (single file only)\r\nvar email = new EmailMessageBuilder()\r\n  .To(\"to.plugins@xamarin.com\")\r\n  .Subject(\"Xamarin Messaging Plugin\")\r\n  .Body(\"Well hello there from Xam.Messaging.Plugin\")\r\n  .WithAttachment(\"/storage/emulated/0/Android/data/MyApp/files/Pictures/temp/IMG_20141224_114954.jpg\");\r\n  .Build();\r\n```\r\n","Hash":"ba85068e80a4d12e57b9a18082a27537","TargetPlatforms":["ios","android"],"TrialHash":null}