<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="bigvet" xml:space="preserve">
    <value>Big vet</value>
    <comment>Competency big vet</comment>
  </data>
  <data name="Distance" xml:space="preserve">
    <value>Distance</value>
    <comment>Title of the distance field</comment>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email </value>
    <comment>Title of the email field</comment>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
    <comment>Generic error title</comment>
  </data>
  <data name="FailedToFindVet" xml:space="preserve">
    <value>Unfortunately we could not locate any vets in the area you searched. Try again, and maybe widen the search area.</value>
  </data>
  <data name="FeedbackEmailSubject" xml:space="preserve">
    <value>The Local Vet feedback</value>
  </data>
  <data name="FeedbackText" xml:space="preserve">
    <value>fhjoids fsd hfoisduf jhwenf irehg9e8o g0rs gr gjpifd jvfid jofidghiofdn gviofd iofd goifd hiogdf </value>
  </data>
  <data name="FeedbackTitleText" xml:space="preserve">
    <value>Feedback</value>
  </data>
  <data name="InfoPageTitle" xml:space="preserve">
    <value>Info</value>
  </data>
  <data name="InfoText" xml:space="preserve">
    <value>hgiordjgnoifdhgoishfiusdhfiusdgfu9dsgh us ifu sdhuf sdhofsdho fse fhosd fhosdi fodis fidos fos jfiods ohids fsd</value>
  </data>
  <data name="InfoTitleText" xml:space="preserve">
    <value>Info</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Loading</value>
    <comment>Generic loading text</comment>
  </data>
  <data name="NearestVetPageTitle" xml:space="preserve">
    <value>Nearest Vet</value>
  </data>
  <data name="NearestVetSinglePageAddress" xml:space="preserve">
    <value>Address</value>
    <comment>Address of a single vet</comment>
  </data>
  <data name="NearestVetSinglePageCompetency" xml:space="preserve">
    <value>Competency</value>
    <comment>Title of the competency field</comment>
  </data>
  <data name="NearestVetSinglePageExpertise" xml:space="preserve">
    <value>Expertise</value>
    <comment>Title of the expertise field</comment>
  </data>
  <data name="NearestVetSinglePageHomeVisit" xml:space="preserve">
    <value>Home Visit</value>
    <comment>Title of the home visit field</comment>
  </data>
  <data name="NearestVetSinglePageName" xml:space="preserve">
    <value>Name</value>
    <comment>Name of a single vet</comment>
  </data>
  <data name="NearestVetSinglePageOpeningHours" xml:space="preserve">
    <value>Opening Hours</value>
    <comment>Title of the opening hours field</comment>
  </data>
  <data name="NearestVetSinglePageTitle" xml:space="preserve">
    <value>Details</value>
    <comment>The title of a single vet</comment>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
    <comment>Generic "No"</comment>
  </data>
  <data name="ParseHelperError" xml:space="preserve">
    <value>Error occured in ParseHelper</value>
    <comment>When an exception is caught in ParseHelper.cs, this text will be sent, with the exception message</comment>
  </data>
  <data name="Phone" xml:space="preserve">
    <value>Phone</value>
    <comment>Title of the phone field</comment>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Search</value>
    <comment>Generic search text</comment>
  </data>
  <data name="SearchNearestVetDistance" xml:space="preserve">
    <value>Distance</value>
  </data>
  <data name="SearchNearestVetLabel" xml:space="preserve">
    <value>Search by place or your location</value>
  </data>
  <data name="SearchNearestVetLocation" xml:space="preserve">
    <value>By your location</value>
  </data>
  <data name="SearchNearestVetLocationLabel" xml:space="preserve">
    <value>Search near your location</value>
  </data>
  <data name="SearchNearestVetPickerText" xml:space="preserve">
    <value>Search type</value>
    <comment>The label for the type of search you can use.</comment>
  </data>
  <data name="SearchNearestVetPlace" xml:space="preserve">
    <value>By place</value>
  </data>
  <data name="SearchNearestVetPlaceLabel" xml:space="preserve">
    <value>Search by place</value>
  </data>
  <data name="SearchPlaceIsEmpty" xml:space="preserve">
    <value>When using search by place the text field cannot be empty.</value>
  </data>
  <data name="SendFeedbackButtonText" xml:space="preserve">
    <value>Send feedback</value>
  </data>
  <data name="smallvet" xml:space="preserve">
    <value>Small vet</value>
    <comment>Competency small vet</comment>
  </data>
  <data name="ViewInMap" xml:space="preserve">
    <value>View in map</value>
    <comment>Text for opening the native map application with the position of the current vet</comment>
  </data>
  <data name="Website" xml:space="preserve">
    <value>Website</value>
    <comment>Title of the website field</comment>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
    <comment>Generic "Yes"</comment>
  </data>
  <data name="FeedbackText" xml:space="preserve">
    <value>If you have general feedback in regards to the app, or think a vet is missing, please feel free to contact me by clicking the button beneath.</value>
  </data>
  <data name="Filter" xml:space="preserve">
  	<value>Filter</value>
  </data>
  <data name="Reset" xml:space="preserve">
  	<value>Reset</value>
  </data>
  <data name="OpenWeb" xml:space="preserve">
  	<value>Visit web site</value>
  </data>
  <data name="SendMail" xml:space="preserve">
  	<value>Send e-mail</value>
  </data>
  <data name="SearchResults" xml:space="preserve">
  	<value>Search results</value>
  </data>
  <data name="NoGeolocation" xml:space="preserve">
  	<value>Your location could not be acquired, try searching for place instead.</value>
  </data>
</root>